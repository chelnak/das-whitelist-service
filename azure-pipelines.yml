trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

workspace:
    clean: all

variables:
  buildConfiguration: 'release'

pool:
  name: 'DAS - Continuous Integration'

steps:
- task: gittools.gitversion-preview.gitversion-task.GitVersion@5
  displayName: GitVersion
  inputs:
    configFilePath: GitVersion.yml
    updateAssemblyInfo: true

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: 'src/**/*.csproj'
    noCache: true

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: 'src/**/*.csproj'
    arguments: '--configuration $(buildConfiguration) -p:Version=$(Build.BuildNumber)"'
    
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*.UnitTests.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build'
  enabled: false

- task: DotNetCoreCLI@2
  displayName: 'Publish Function App'
  inputs:
    command: publish
    publishWebProjects: false
    projects: 'src/SFA.DAS.WhitelistService.Functions/SFA.DAS.WhitelistService.Functions.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)/publish --no-restore --no-build'

- task: DotNetCoreCLI@2
  displayName: 'Publish Website'
  inputs:
    command: publish
    publishWebProjects: false
    projects: 'src/SFA.DAS.WhitelistService.Web/SFA.DAS.WhitelistService.Web.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(system.defaultworkingdirectory)/src/SFA.DAS.WhitelistService.Web/publish/ --no-restore --no-build'

- task: Docker@2
  displayName: Login to Docker Hub
  inputs:
    command: login
    containerRegistry: 'Apprenticeships DevOps Docker Hub'

- task: Docker@2
  displayName: Build Web Image
  inputs:
    command: build
    dockerfile: Web.Dockerfile
    tags: |
      $(build.buildnumber)
      latest
- task: Docker@2
  displayName: Push Web Image
  inputs:
    command: push
    repository: apprenticeshipsdevops/das-whitelist-service
    tags: $(build.buildnumber)
- task: Docker@2
  displayName: Push Web Image Latest if master
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: push
    repository: apprenticeshipsdevops/das-whitelist-service
    tags: latest
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    contents: |
     azure/**
     src/SFA.DAS.WhitelistService.Web/publish/**
    targetFolder: '$(build.artifactstagingdirectory)/publish'
    overWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathtoPublish: '$(build.artifactstagingdirectory)/publish'
